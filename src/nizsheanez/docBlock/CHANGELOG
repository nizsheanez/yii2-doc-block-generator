Version 1.8 work in progress
-------------------------------

Version 1.7 work
-------------------------------
#18 - no edit file if no changes
#19 - save users properties and methods


Version 1.6
-------------------------------
#11 - Add Using instruction to Readme enhance
#17 - Check on isInstantiable

Version 1.5
-------------------------------
#12 - Experiment on simple components, Experiment on simple php class
#13 - Check mysql metadata for generate attribute type,

Version 1.4
-------------------------------
#7 - Incapsulate configurations to config file
#9 - No add comments if no elements
#10 - Filtering before instantiate property

Version 1.3
-------------------------------
#4 - add cool comments
#6 - internatioinalization


Version 1.2
-------------------------------
- #3 add scopes support
- #5 non AR behaviors method support


Version 1.1
-------------------------------
- #1 Полная поддержка AR relations
- #2 Добавлена возможность исключать группы свойств из результата, посредством DocBlockCommand::$propertyIteratorOptions - значения по умолчанию:
    'includeAttributes' => true,
    'includeEvents'     => false,
    'includeAccessors'  => true,
    'includeRelations'  => true


Version 1.0
-------------------------------
- Произвольный итератор для файлов (значит вы можете контролировать какие именно файлы будут обработаны). В комплекте идет итератор, который перебирает все модели всех модулей, т.е. рекурсивно проходится по директориям models всех модулей, доступных через Yii::app()->getModules().
- Произвольный итератор для свойств (значит вы можете контролировать для каких именно свойств будут сгенерированны аннотации). В комплекте идет итератор, который перебирает все публичные свойства, геттеры, сеттеры, события, поведения(их свойства, геттеры и сеттеры, если компонент поддерживает метод behaviors), атрибуты моделей(т.е. если компонент поддерживает метод getAttributes(), то итератор не побрезгует им воспользоваться)
- Если геттер(сеттер) имеет больше нуля(одного) обязательных параметров, то он игнорируется.
- Если свойство уже описано в одном из родительских классов, то он игнорируется.
- Если для геттера описана аннотация @return она будет учтена(тип и комментарий будут добавлены в свойство чтения).
- Самая вкусняшка: Сгенерированные комментарии можно редактировать! т.е. если вы захотите добавить описание в блок комментариев(так называемые shortDescription и longDescription), то при перегенерации они будут сохранены(вы же старались!).
- Если для задания описания или типа свойства не хватило информации в текущих исходниках, то вы можете добавить их прямо в сгенерированный блок комментариев и они будут использоваться в дальнейшем и не потеряются при перегенерации. Конечно же, если информации в исходниках достаточно для генерации типа или комментария, то будет использована она, так что редактировать сгенерированные типы или комментарии бесполезно - нужно редактировать источник информации, например комментарии к геттеру.
- Аннотации author|api|category|deprecated|example|filesource|ignore|internal|license|link|package|see|since|subpackage|todo|version|uses|used-by будут сохранены(думаю этой простыни вам хватит)
- Поддержка @property-read/@property-write (по умолчанию выключено)
- Преобразование стилей кодирования camelCaseToUnderscore (по умолчанию выключено, т.к. требует внешнего преобразователя)
- Ну и приятный бонус: вертикальное выравнивание (можно выключить)
